<?php/** * oauth服务端 * client数据暂时先直接在数据库中手动添加 */if (!defined('IN_DISCUZ')) {    exit('Access Denied');}require_once DISCUZ_ROOT . '/source/plugin/codfrm_oauth2/lib/utils.php';require_once libfile('table/oauth_client', 'plugin/codfrm_oauth2');require_once libfile('table/oauth_code', 'plugin/codfrm_oauth2');require_once libfile('table/oauth_record', 'plugin/codfrm_oauth2');include_once template('codfrm_oauth2:module');class oauth{    protected $client;    protected $record;    protected $code;    public function __construct()    {        $this->client = new table_oauth_client();        $this->record = new table_oauth_record();        $this->code = new table_oauth_code();    }    public function run()    {        $client_id = $_GET['client_id'] ?: $_POST['client_id'];        if (!$client_id) {            openMessage("client_id不能为空");        }        $client = $this->client->fetchByClientId($client_id);        if (!$client) {            openMessage("client不存在");        }        $scope = $_GET['scope'] ?: $_POST['scope'];        if (!$scope) {            openMessage("申请权限不能为空");        }        if (strtoupper($_SERVER['REQUEST_METHOD']) == 'POST') {            //确定授权            $this->confirm($client);            return;        }        switch ($_GET['response_type']) {            case 'code':                // 暂时只支持需要的授权码模式                $this->code($client);                break;        }    }    public function code($client)    {        global $_G;        // 判断是否登录        if (!$_G['uid']) {            return openMessage('登录用户进行跳转');        }        // 将重定向地址按行分割,并判断是否在白名单中        $redirect_uris = explode("\n", $client['redirect_uri']);        if (!empty($_GET['redirect_uri']) && !in_array($_GET['redirect_uri'], $redirect_uris)) {            return showError("重定向地址错误");        }        // 判断是否授权过        $record = $this->record->fetchByUid($client['id'], $_G['uid']);        if (!$record) {            require_once template("codfrm_oauth2:confirm");        } else {            //TODO:权限允许范围判断            //带code重定向            $this->redirect($_G['uid'], $client['id'], $_GET['redirect_uri'] ?: $client['redirect_uri'], $_GET['scope']);        }    }    protected function redirect($uid, $client_id, $uri, $scope)    {        $code = generateRandomString(16);        $this->code->create($code, $uid, $client_id, $scope);        if (strpos($uri, "?") === false) {            $uri .= "?code=$code";        } else {            $uri .= "&code=$code";        }        header("Location: " . $uri);    }    protected function confirm($client)    {        global $_G;        // 判断是否登录        if (!$_G['uid']) {            return openMessage('未登录');        }        // 将重定向地址按行分割,并判断是否在白名单中        $redirect_uris = explode("\n", $client['redirect_uri']);        if (!empty($_GET['redirect_uri']) && !in_array($_GET['redirect_uri'], $redirect_uris)) {            return showError("重定向地址错误");        }        // 判断是否授权过        $record = $this->record->fetchByUid($client['id'], $_G['uid']);        if (!$record) {            $this->record->create($client['id'], $_G['uid'], $_POST['scope']);        }        //TODO:权限允许范围判断        //带code重定向        $this->redirect($_G['uid'], $client['id'], $_POST['redirect_uri'] ?: $client['redirect_uri'], $_POST['scope']);    }}$oauth = new oauth();$oauth->run();