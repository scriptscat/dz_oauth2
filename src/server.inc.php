<?php/** * oauth服务端 * client数据暂时先直接在数据库中手动添加 */if (!defined('IN_DISCUZ')) {    exit('Access Denied');}require_once DISCUZ_ROOT . '/source/plugin/codfrm_oauth2/lib/utils.php';require_once libfile('table/oauth_code', 'plugin/codfrm_oauth2');require_once libfile('table/oauth_access_token', 'plugin/codfrm_oauth2');require_once libfile('table/oauth_client', 'plugin/codfrm_oauth2');require_once libfile('table/common_member', 'class');class server{    protected $token;    protected $code;    protected $client;    public function __construct()    {        $this->token = new table_oauth_access_token();        $this->code = new table_oauth_code();        $this->client = new table_oauth_client();    }    public function run()    {        switch ($_GET['op']) {            case 'access_token':                $resp = $this->access_token();                break;            case 'user':                $resp = $this->user();                break;            default:                return;        }        echo json_encode($resp, JSON_UNESCAPED_UNICODE);    }    public function access_token()    {        if (!$code = $_GET['code']) {            return ['code' => 1001, 'msg' => 'code is empty'];        }        if (!$client = $_POST['client_id']) {            return ['code' => 1003, 'msg' => 'client_id is empty'];        }        if (!$secret = $_POST['client_secret']) {            return ['code' => 1004, 'msg' => 'secret is empty'];        }        if (!$client = $this->client->fetchByClientId($client)) {            return ['code' => 1005, 'msg' => 'client does not exist'];        }        if ($client['client_secret'] != $secret) {            return ['code' => 1006, 'msg' => 'secret is wrong'];        }        $record = $this->code->fetchByCode($code);        if (!$record) {            return ['code' => 1002, 'msg' => 'code does not exist'];        }        if ($record['createtime'] + 300 < time()) {            return ['code' => 1007, 'msg' => 'code does not exist'];        }        $access_token = generateRandomString(32);        $this->token->create($access_token, $record['uid'], $client['id'], $record['scope']);        $this->code->deleteByCode($code);        return ['code' => 0, 'access_token' => $access_token];    }    public function user()    {        if (!isPost()) {            return ['code' => 1001, 'msg' => 'wrong request method'];        }        $access_token = $_POST['access_token'];        if (!$access_token) {            return ['code' => 1002, 'msg' => 'access_token is empty'];        }        $record = $this->token->fetchByAccessToken($access_token);        if (!$record) {            return ['code' => 1003, 'msg' => 'token does not exist'];        }        if ($record['createtime'] + 300 < time()) {            return ['code' => 1004, 'msg' => 'token does not exist'];        }        $user = new table_common_member();        $user = $user->fetch($record['uid']);        if (!$user) {            return ['code' => 1005, 'msg' => 'user does not exist'];        }        $avatar = '';        if ($user['avatarstatus'] == '1') {            $avatar = avatar($user['uid']);        }        return ['code' => 0, 'user' => [            'uid' => $user['uid'],            'username' => $user['username'],            'email' => $user['email'],            'avatar' => $avatar,        ]];    }}$server = new server();$server->run();